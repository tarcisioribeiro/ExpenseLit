"""
Componentes de autentica√ß√£o.

Este m√≥dulo implementa todos os componentes relacionados √†
autentica√ß√£o de usu√°rios na aplica√ß√£o.
"""

import logging
from typing import Optional
# , Tuple

import streamlit as st

from services.api_client import (
    api_client,
    AuthenticationError,
    ApiClientError
)
# from config.settings import app_config


logger = logging.getLogger(__name__)


class AuthenticationComponent:
    """
    Componente de autentica√ß√£o da aplica√ß√£o.

    Esta classe implementa toda a l√≥gica de interface para
    login, logout e gerenciamento de sess√£o de usu√°rio.
    """

    def __init__(self):
        """Inicializa o componente de autentica√ß√£o."""
        self.session_keys = [
            'is_authenticated', 'access_token', 'refresh_token',
            'token_expires_at', 'username', 'user_permissions'
        ]

    def render_login_form(self) -> bool:
        """
        Renderiza o formul√°rio de login.

        Returns
        -------
        bool
            True se o usu√°rio foi autenticado com sucesso
        """
        st.markdown("### Login - ExpenseLit")
        st.markdown("---")

        # Verifica se j√° est√° autenticado
        if st.session_state.get('is_authenticated', False):
            self._render_authenticated_user()
            return True

        # Formul√°rio de login
        with st.form("login_form", clear_on_submit=False):
            st.markdown("**Credenciais:**")

            col1, col2 = st.columns([3, 1])

            with col1:
                username = st.text_input(
                    "Usu√°rio:",
                    placeholder="Digite seu nome de usu√°rio",
                    help="Nome de usu√°rio cadastrado no sistema"
                )

                password = st.text_input(
                    "Senha:",
                    type="password",
                    placeholder="Digite sua senha",
                    help="Senha do seu usu√°rio"
                )

            with col2:
                st.markdown("<br>", unsafe_allow_html=True)
                login_button = st.form_submit_button(
                    "Entrar",
                    width='stretch',
                    type="primary"
                )

        # Processa o login
        if login_button:
            if not username or not password:
                st.error("Por favor, preencha todos os campos.")
                return False

            return self._process_login(username, password)

        # Informa√ß√µes de ajuda
        with st.expander("Precisa de ajuda?"):
            st.markdown("""
            **Como fazer login:**
            1. Digite seu nome de usu√°rio no campo "Usu√°rio"
            2. Digite sua senha no campo "Senha"
            3. Clique em "üöÄ Entrar"

            **Problemas de acesso:**
            - Verifique se suas credenciais est√£o corretas
            - Certifique-se de que a API est√° rodando
            - Entre em contato com o administrador se necess√°rio
            """)

        return False

    def _render_authenticated_user(self) -> None:
        """Renderiza informa√ß√µes do usu√°rio autenticado."""
        username = st.session_state.get('username', 'Usu√°rio')

        col1, col2 = st.columns([3, 1])

        with col1:
            st.success(f"Logado como: **{username}**")

        with col2:
            if st.button("Sair", type="secondary", width='stretch'):
                self.logout()
                st.rerun()

    def _process_login(self, username: str, password: str) -> bool:
        """
        Processa o login do usu√°rio.

        Parameters
        ----------
        username : str
            Nome de usu√°rio
        password : str
            Senha do usu√°rio

        Returns
        -------
        bool
            True se autenticado com sucesso
        """
        try:
            with st.spinner("üîÑ Autenticando..."):
                # Tenta fazer login na API
                auth_data = api_client.authenticate(username, password)
                st.write(auth_data)
                # Busca permiss√µes do usu√°rio
                try:
                    user_permissions = api_client.get_user_permissions()
                    st.session_state['user_permissions'] = user_permissions
                except ApiClientError as e:
                    # Se falhar ao buscar permiss√µes,
                    # assume superusu√°rio para evitar bloqueios.
                    st.session_state['user_permissions'] = {
                        'is_superuser': True,
                        'permissions': []
                    }
                    logger.warning(
                        f"""Falha ao buscar permiss√µes do usu√°rio: {e}.
                        Assumindo acesso total.
                        """
                    )

            st.success(f"üéâ Bem-vindo, {username}!")
            logger.info(f"Usu√°rio {username} logado com sucesso")

            # For√ßa atualiza√ß√£o da p√°gina
            st.rerun()
            return True

        except AuthenticationError as e:
            st.error(f"‚ùå **Erro de autentica√ß√£o:** {e}")
            logger.warning(f"Tentativa de login falhada para {username}: {e}")
            return False
        except ApiClientError as e:
            st.error(f"üîß **Erro de conex√£o:** {e}")
            st.info("üí° Verifique se a API est√° rodando e tente novamente.")
            logger.error(f"Erro de API no login: {e}")
            return False
        except Exception as e:
            st.error(f"üí• **Erro inesperado:** {e}")
            logger.error(f"Erro inesperado no login: {e}")
            return False

    def logout(self) -> None:
        """Realiza logout do usu√°rio."""
        try:
            username = st.session_state.get('username', 'usu√°rio')

            # Remove dados de autentica√ß√£o
            api_client.logout()

            # Limpa outras chaves de sess√£o espec√≠ficas da aplica√ß√£o
            app_keys = ['current_page', 'selected_account', 'filters']
            for key in app_keys:
                st.session_state.pop(key, None)

            st.success(f"üëã At√© logo, {username}!")
            logger.info(f"Usu√°rio {username} deslogado")

        except Exception as e:
            st.error(f"Erro ao fazer logout: {e}")
            logger.error(f"Erro no logout: {e}")

    def is_authenticated(self) -> bool:
        """
        Verifica se o usu√°rio est√° autenticado.

        Returns
        -------
        bool
            True se autenticado
        """
        return st.session_state.get('is_authenticated', False)

    def get_current_user(self) -> Optional[str]:
        """
        Obt√©m o nome do usu√°rio atual.

        Returns
        -------
        Optional[str]
            Nome do usu√°rio ou None se n√£o autenticado
        """
        if self.is_authenticated():
            return st.session_state.get('username')
        return None

    def get_user_permissions(self) -> dict:
        """
        Obt√©m as permiss√µes do usu√°rio atual.

        Returns
        -------
        dict
            Dicion√°rio com permiss√µes do usu√°rio
        """
        return st.session_state.get('user_permissions', {})

    def has_permission(self, permission: str) -> bool:
        """
        Verifica se o usu√°rio tem uma permiss√£o espec√≠fica.

        Parameters
        ----------
        permission : str
            Nome da permiss√£o (ex: 'expenses.add_expense')

        Returns
        -------
        bool
            True se tem a permiss√£o
        """
        if not self.is_authenticated():
            return False

        permissions = self.get_user_permissions()
        user_permissions = permissions.get('permissions', [])

        # Superuser tem todas as permiss√µes
        if permissions.get('is_superuser', False):
            return True

        return permission in user_permissions

    def require_authentication(self) -> bool:
        """
        Garante que o usu√°rio est√° autenticado.

        Se n√£o estiver autenticado, tenta carregar do cookie.
        Se falhar, exibe o formul√°rio de login e interrompe a execu√ß√£o da p√°gina.

        Returns
        -------
        bool
            True se autenticado
        """
        # Primeiro verifica se j√° est√° autenticado na sess√£o
        if self.is_authenticated():
            return True
            
        # Tenta restaurar sess√£o se n√£o estiver autenticado
        if api_client.restore_session_if_available():
            return True
            
        # Se falhar, mostra login
        st.warning("üîí **Acesso restrito.** Fa√ßa login para continuar.")
        self.render_login_form()
        st.stop()
        return True

    def render_session_info(self) -> None:
        """Renderiza informa√ß√µes da sess√£o no sidebar."""
        if self.is_authenticated():
            with st.sidebar:
                st.markdown("---")
                st.markdown("### üë§ Sess√£o")

                username = self.get_current_user()
                st.markdown(f"**Usu√°rio:** {username}")

                # Bot√£o de logout no sidebar
                if st.button(
                    "Sair",
                    key="sidebar_logout",
                    width='stretch'
                ):
                    self.logout()
                    st.rerun()


def require_auth() -> AuthenticationComponent:
    """
    Decorator/fun√ß√£o helper para p√°ginas que requerem autentica√ß√£o.

    Returns
    -------
    AuthenticationComponent
        Inst√¢ncia do componente de autentica√ß√£o
    """
    auth = AuthenticationComponent()
    auth.require_authentication()
    return auth


class AuthLogin:
    """
    Classe respons√°vel pelo controle de login seguindo o padr√£o CodexDB.

    Esta classe gerencia o fluxo completo de autentica√ß√£o e navega√ß√£o
    da aplica√ß√£o ExpenseLit.
    """

    def __init__(self):
        """Inicializa o componente de login."""
        self.auth_component = AuthenticationComponent()

    def get_login(self):
        """
        Interface principal para login e navega√ß√£o da aplica√ß√£o.

        Similar ao padr√£o CodexDB, verifica se existe token na sess√£o ou cookie
        e direciona para login ou menu principal.
        """
        # Primeiro, tenta restaurar sess√£o se n√£o estiver autenticado
        if not self.auth_component.is_authenticated():
            if api_client.restore_session_if_available():
                # Sess√£o restaurada com sucesso
                from home.main import HomePage
                HomePage().main_menu()
                return

        # Limpa token inv√°lido se existir
        if 'is_authenticated' in st.session_state and not (
            st.session_state.is_authenticated
        ):
            self._clear_invalid_session()

        # Verifica se usu√°rio j√° est√° autenticado
        if not self.auth_component.is_authenticated():
            self._render_login_interface()
        else:
            # Usu√°rio autenticado - carrega menu principal
            from home.main import HomePage
            HomePage().main_menu()

    def _clear_invalid_session(self):
        """Limpa dados de sess√£o inv√°lidos."""
        invalid_keys = [
            'is_authenticated', 'access_token', 'refresh_token',
            'username', 'user_permissions', 'current_page'
        ]
        for key in invalid_keys:
            st.session_state.pop(key, None)

    def _render_login_interface(self):
        """Renderiza a interface de login."""
        # Header da aplica√ß√£o (similar ao CodexDB)
        col1, col2, col3 = st.columns(3)

        with col1:
            st.markdown("# üí∞ ExpenseLit")
            st.markdown("**Controle Financeiro Pessoal**")

        st.divider()

        # Abas para Login e Cadastro
        tab1, tab2 = st.tabs(["üîê Login", "üë§ Novo Usu√°rio"])
        
        with tab1:
            # Formul√°rio de login centralizado
            col4, col5, col6 = st.columns(3)

            with col5:
                username = st.text_input(
                    "Usu√°rio",
                    placeholder="Digite seu usu√°rio",
                    key="login_username"
                )
                password = st.text_input(
                    "Senha",
                    type="password",
                    placeholder="Digite sua senha",
                    key="login_password"
                )

                if st.button("üîë Entrar", type="primary", width='stretch'):
                    if username and password:
                        # Processa login usando o componente existente
                        success = self._process_login(username, password)

                        if success:
                            st.toast("‚úÖ Login realizado com sucesso!")
                            st.rerun()
                    else:
                        st.error("Preencha todos os campos.")
        
        with tab2:
            self._render_register_form()

    def _process_login(self, username: str, password: str) -> bool:
        """
        Processa o login do usu√°rio.

        Parameters
        ----------
        username : str
            Nome de usu√°rio
        password : str
            Senha

        Returns
        -------
        bool
            True se login foi bem-sucedido
        """
        try:
            with st.spinner("üîÑ Autenticando..."):
                # Usa o componente de autentica√ß√£o existente
                auth_data = api_client.authenticate(username, password)
                # Busca permiss√µes do usu√°rio
                try:
                    user_permissions = api_client.get_user_permissions()
                    st.session_state['user_permissions'] = user_permissions
                except ApiClientError:
                    # Assume superusu√°rio se n√£o conseguir buscar permiss√µes
                    st.session_state['user_permissions'] = {
                        'is_superuser': True,
                        'permissions': []
                    }

                return True

        except AuthenticationError as e:
            st.error(f"‚ùå Erro de autentica√ß√£o: {e}")
            return False
        except ApiClientError as e:
            st.error(f"üîß Erro de conex√£o: {e}")
            st.info("üí° Verifique se a API est√° rodando.")
            return False
        except Exception as e:
            st.error(f"üí• Erro inesperado: {e}")
            return False

    def _render_register_form(self) -> None:
        """Renderiza formul√°rio de cadastro de novo usu√°rio."""
        st.markdown("### üë§ Criar Nova Conta")
        st.info("‚ÑπÔ∏è Usu√°rios criados aqui ter√£o acesso a todas as funcionalidades do sistema.")
        
        col1, col2, col3 = st.columns([1, 2, 1])
        
        with col2:
            with st.form("register_form"):
                # Dados b√°sicos
                st.markdown("**Dados de Acesso:**")
                
                new_username = st.text_input(
                    "üë§ Nome de Usu√°rio",
                    placeholder="Ex: joao_silva",
                    help="Nome √∫nico para login no sistema"
                )
                
                new_password = st.text_input(
                    "üîí Senha",
                    type="password",
                    placeholder="Senha segura",
                    help="M√≠nimo de 8 caracteres"
                )
                
                confirm_password = st.text_input(
                    "üîí Confirmar Senha",
                    type="password",
                    placeholder="Digite a senha novamente"
                )
                
                st.markdown("**Dados Pessoais:**")
                
                full_name = st.text_input(
                    "üìù Nome Completo",
                    placeholder="Ex: Jo√£o Silva Santos"
                )
                
                email = st.text_input(
                    "üìß Email",
                    placeholder="joao@email.com"
                )
                
                phone = st.text_input(
                    "üìû Telefone",
                    placeholder="(11) 99999-9999"
                )
                
                document = st.text_input(
                    "üìÑ CPF",
                    placeholder="000.000.000-00"
                )
                
                sex = st.selectbox(
                    "üöª Sexo",
                    options=[('M', 'Masculino'), ('F', 'Feminino')],
                    format_func=lambda x: x[1]
                )
                
                # Bot√£o de cadastro
                col_submit, col_info = st.columns([1, 2])
                
                with col_submit:
                    submitted = st.form_submit_button(
                        "‚úÖ Criar Conta",
                        type="primary"
                    )
                
                with col_info:
                    st.caption("üîê Usu√°rio criado com permiss√µes padr√£o")
                
                if submitted:
                    self._process_register(
                        new_username, new_password, confirm_password,
                        full_name, email, phone, document, sex[0]
                    )

    def _process_register(self, username: str, password: str, confirm_password: str,
                         full_name: str, email: str, phone: str, document: str, sex: str) -> bool:
        """
        Processa o cadastro de novo usu√°rio.
        
        Parameters
        ----------
        username : str
            Nome de usu√°rio
        password : str
            Senha do usu√°rio
        confirm_password : str
            Confirma√ß√£o da senha
        full_name : str
            Nome completo
        email : str
            Email
        phone : str
            Telefone
        document : str
            CPF/documento
        sex : str
            Sexo (M/F)
            
        Returns
        -------
        bool
            True se usu√°rio foi criado com sucesso
        """
        # Valida√ß√µes b√°sicas
        if not all([username, password, full_name, email, phone, document]):
            st.error("‚ùå Por favor, preencha todos os campos obrigat√≥rios.")
            return False
            
        if password != confirm_password:
            st.error("‚ùå As senhas n√£o coincidem.")
            return False
            
        if len(password) < 8:
            st.error("‚ùå A senha deve ter pelo menos 8 caracteres.")
            return False
        
        # Valida CPF (formato b√°sico)
        import re
        doc_clean = re.sub(r'[^0-9]', '', document)
        if len(doc_clean) != 11:
            st.error("‚ùå CPF deve ter 11 d√≠gitos.")
            return False
        
        try:
            with st.spinner("üîÑ Criando usu√°rio..."):
                # Primeiro cria o membro
                member_data = {
                    'name': full_name,
                    'document': document,
                    'phone': phone,
                    'email': email,
                    'sex': sex,
                    'is_user': True,
                    'is_creditor': True,
                    'is_benefited': True,
                    'active': True
                }
                
                # Cria membro via API
                new_member = api_client.post("members/", member_data)
                member_id = new_member.get('id')
                
                # Cria usu√°rio via API (assumindo que existe endpoint para isso)
                user_data = {
                    'username': username,
                    'password': password,
                    'member_id': member_id,
                    'is_superuser': False,  # Usu√°rio padr√£o, n√£o superusu√°rio
                    'is_active': True
                }
                
                # Tenta criar usu√°rio - se n√£o existir endpoint espec√≠fico, pode adaptar
                try:
                    new_user = api_client.post("users/", user_data)
                    st.success(f"‚úÖ Usu√°rio '{username}' criado com sucesso!")
                    st.info("üîë Agora voc√™ pode fazer login com suas credenciais.")
                    return True
                    
                except ApiClientError as e:
                    # Se erro ao criar usu√°rio, remove o membro criado
                    try:
                        api_client.delete(f"members/{member_id}/")
                    except:
                        pass
                    raise e
                    
        except ApiClientError as e:
            if "already exists" in str(e).lower() or "unique" in str(e).lower():
                st.error("‚ùå Nome de usu√°rio j√° existe. Escolha outro.")
            else:
                st.error(f"‚ùå Erro ao criar usu√°rio: {e}")
            logger.error(f"Erro ao criar usu√°rio: {e}")
            return False
        except Exception as e:
            st.error(f"üí• Erro inesperado: {e}")
            logger.error(f"Erro inesperado ao criar usu√°rio: {e}")
            return False


# Inst√¢ncia global do componente de autentica√ß√£o
auth_component = AuthenticationComponent()
