"""
Servi√ßo de permiss√µes do ExpenseLit.

Este m√≥dulo implementa valida√ß√µes de permiss√µes CRUD seguindo
o padr√£o do CodexDB para controle de acesso das funcionalidades.
"""

import logging
from typing import List, Dict, Any, Optional
import streamlit as st

logger = logging.getLogger(__name__)


class PermissionsService:
    """
    Servi√ßo de valida√ß√£o de permiss√µes CRUD.

    Segue o padr√£o do CodexDB para gerenciar permiss√µes de usu√°rio
    em todas as opera√ß√µes do sistema.
    """

    # Mapeamento de permiss√µes Django para opera√ß√µes CRUD
    PERMISSIONS_MAP = {
        # Members
        'members.add_member': 'create',
        'members.view_member': 'read',
        'members.change_member': 'update',
        'members.delete_member': 'delete',

        # Accounts
        'accounts.add_account': 'create',
        'accounts.view_account': 'read',
        'accounts.change_account': 'update',
        'accounts.delete_account': 'delete',

        # Expenses
        'expenses.add_expense': 'create',
        'expenses.view_expense': 'read',
        'expenses.change_expense': 'update',
        'expenses.delete_expense': 'delete',

        # Credit Cards
        'credit_cards.add_creditcard': 'create',
        'credit_cards.view_creditcard': 'read',
        'credit_cards.change_creditcard': 'update',
        'credit_cards.delete_creditcard': 'delete',

        # Loans
        'loans.add_loan': 'create',
        'loans.view_loan': 'read',
        'loans.change_loan': 'update',
        'loans.delete_loan': 'delete',

        # Transfers
        'transfers.add_transfer': 'create',
        'transfers.view_transfer': 'read',
        'transfers.change_transfer': 'update',
        'transfers.delete_transfer': 'delete',

        # Revenues
        'revenues.add_revenue': 'create',
        'revenues.view_revenue': 'read',
        'revenues.change_revenue': 'update',
        'revenues.delete_revenue': 'delete',
    }

    @staticmethod
    def get_user_permissions() -> Optional[Dict[str, Any]]:
        """
        Obt√©m as permiss√µes do usu√°rio atual do session_state.

        Returns
        -------
        Dict[str, Any] or None
            Dicion√°rio com as permiss√µes do usu√°rio ou None se n√£o encontrado
        """
        return st.session_state.get('user_permissions')

    @staticmethod
    def is_superuser() -> bool:
        """
        Verifica se o usu√°rio atual √© superusu√°rio.

        Returns
        -------
        bool
            True se o usu√°rio for superusu√°rio
        """
        user_permissions = PermissionsService.get_user_permissions()
        if not user_permissions:
            return False
        return user_permissions.get('is_superuser', False)

    @staticmethod
    def is_member_group() -> bool:
        """
        Verifica se o usu√°rio pertence ao grupo 'members'.

        Returns
        -------
        bool
            True se o usu√°rio pertence ao grupo 'members'
        """
        user_permissions = PermissionsService.get_user_permissions()
        if not user_permissions:
            return False

        # Verifica diferentes formatos poss√≠veis de grupos na resposta da API
        user_groups = user_permissions.get('groups', [])

        # Verifica se o grupo 'members' est√° presente
        # Suporta tanto strings quanto dicion√°rios com 'name'
        for group in user_groups:
            if isinstance(group, str):
                if group.lower() in ['members', 'members']:
                    return True
            elif isinstance(group, dict):
                group_name = group.get('name', '')
                if group_name.lower() in ['members', 'members']:
                    return True

        # Fallback: se n√£o encontrou grupos mas tem permiss√µes,
        # assume que est√° no grupo members (para compatibilidade)
        if user_permissions.get('permissions') and not user_groups:
            return True

        return False

    @staticmethod
    def get_app_permissions(app_name: str) -> List[str]:
        """
        Obt√©m as permiss√µes do usu√°rio para uma aplica√ß√£o espec√≠fica.

        Agora inclui verifica√ß√£o de pertencimento ao grupo 'members'.

        Parameters
        ----------
        app_name : str
            Nome da aplica√ß√£o (members, accounts, expenses, etc.)

        Returns
        -------
        List[str]
            Lista de permiss√µes CRUD para a aplica√ß√£o
        """
        user_permissions = PermissionsService.get_user_permissions()
        if not user_permissions:
            return []

        # Superusu√°rios t√™m acesso total
        if PermissionsService.is_superuser():
            return ['create', 'read', 'update', 'delete']

        # Verifica se o usu√°rio pertence ao grupo 'members'
        if not PermissionsService.is_member_group():
            logger.warning(
                "Usu√°rio n√£o pertence ao grupo 'members'. "
                "Acesso negado √†s funcionalidades."
            )
            return []

        user_perms_list = user_permissions.get('permissions', [])
        app_permissions = []

        # Se n√£o h√° permiss√µes espec√≠ficas mas est√° no grupo members,
        # concede permiss√µes b√°sicas
        if not user_perms_list:
            # Usu√°rios do grupo members t√™m permiss√µes b√°sicas
            return ['read', 'create']

        for perm in user_perms_list:
            if perm.startswith(f"{app_name}."):
                crud_operation = PermissionsService.PERMISSIONS_MAP.get(perm)
                if crud_operation and crud_operation not in app_permissions:
                    app_permissions.append(crud_operation)

        # Se n√£o encontrou permiss√µes espec√≠ficas para esta app mas est√° no
        # grupo members, concede b√°sicas
        if not app_permissions:
            app_permissions = ['read', 'create']

        return app_permissions

    @staticmethod
    def has_permission(app_name: str, operation: str) -> bool:
        """
        Verifica se o usu√°rio tem permiss√£o para uma opera√ß√£o espec√≠fica.

        Parameters
        ----------
        app_name : str
            Nome da aplica√ß√£o (members, accounts, expenses, etc.)
        operation : str
            Opera√ß√£o CRUD (create, read, update, delete)

        Returns
        -------
        bool
            True se o usu√°rio tem a permiss√£o
        """
        app_permissions = PermissionsService.get_app_permissions(app_name)
        return operation in app_permissions

    @staticmethod
    def check_permission(
        app_name: str,
        operation: str,
        show_error: bool = True
    ) -> bool:
        """
        Verifica permiss√£o e opcionalmente mostra erro na interface.

        Parameters
        ----------
        app_name : str
            Nome da aplica√ß√£o
        operation : str
            Opera√ß√£o CRUD
        show_error : bool, optional
            Se deve mostrar erro na interface, by default True

        Returns
        -------
        bool
            True se tem permiss√£o
        """
        has_perm = PermissionsService.has_permission(app_name, operation)

        if not has_perm and show_error:
            operation_names = {
                'create': 'criar',
                'read': 'visualizar',
                'update': 'editar',
                'delete': 'excluir'
            }

            app_names = {
                'members': 'membros',
                'accounts': 'contas',
                'expenses': 'despesas',
                'credit_cards': 'cart√µes de cr√©dito',
                'loans': 'empr√©stimos',
                'transfers': 'transfer√™ncias',
                'revenues': 'receitas'
            }

            op_name = operation_names.get(operation, operation)
            app_display = app_names.get(app_name, app_name)

            st.error(f"‚ùå Voc√™ n√£o tem permiss√£o para {op_name} {app_display}.")
            st.info("üí° Entre em contato com o administrador do sistema.")

        return has_perm

    @staticmethod
    def require_permission(app_name: str, operation: str):
        """
        Decorator/fun√ß√£o para exigir permiss√£o em uma opera√ß√£o.

        Parameters
        ----------
        app_name : str
            Nome da aplica√ß√£o
        operation : str
            Opera√ß√£o CRUD

        Raises
        ------
        st.stop
            Para a execu√ß√£o se n√£o tiver permiss√£o
        """
        if not PermissionsService.check_permission(app_name, operation):
            st.stop()

    @staticmethod
    def get_permission_summary() -> Dict[str, List[str]]:
        """
        Obt√©m um resumo de todas as permiss√µes do usu√°rio por app.

        Returns
        -------
        Dict[str, List[str]]
            Dicion√°rio com permiss√µes por aplica√ß√£o
        """
        apps = [
            'members', 'accounts', 'expenses', 'credit_cards',
            'loans', 'transfers', 'revenues'
        ]

        summary = {}
        for app in apps:
            summary[app] = PermissionsService.get_app_permissions(app)

        return summary

    @staticmethod
    def has_system_access() -> bool:
        """
        Verifica se o usu√°rio tem acesso ao sistema.

        Returns
        -------
        bool
            True se o usu√°rio tem acesso (√© superusu√°rio ou est√° no grupo
            members)
        """
        user_permissions = PermissionsService.get_user_permissions()
        if not user_permissions:
            return False

        # Superusu√°rios sempre t√™m acesso total
        if PermissionsService.is_superuser():
            return True

        # Verifica se est√° no grupo members
        if PermissionsService.is_member_group():
            return True

        # Fallback: se tem qualquer permiss√£o espec√≠fica, assume acesso
        if user_permissions.get('permissions'):
            return True

        return False

    @staticmethod
    def render_permissions_info():
        """Renderiza informa√ß√µes sobre as permiss√µes do usu√°rio atual."""
        user_permissions = PermissionsService.get_user_permissions()
        if not user_permissions:
            st.error("‚ùå Nenhuma permiss√£o encontrada")
            return

        if not PermissionsService.has_system_access():
            st.error("‚ùå **Acesso Negado**")
            st.warning(
                "üîí Voc√™ n√£o possui permiss√µes para acessar este sistema. "
                "Entre em contato com o administrador."
            )
            return

        if PermissionsService.is_superuser():
            st.success("üîë **Superusu√°rio** - Acesso total ao sistema")
            st.info(
                "Voc√™ tem permiss√µes completas para todas as funcionalidades."
            )
            return

        if PermissionsService.is_member_group():
            st.success("üë• **Membro** - Acesso √†s funcionalidades do sistema")

        st.markdown("### üîê Suas Permiss√µes")

        summary = PermissionsService.get_permission_summary()

        for app_name, permissions in summary.items():
            if permissions:
                app_names = {
                    'members': 'üë• Membros',
                    'accounts': 'üè¶ Contas',
                    'expenses': 'üí∏ Despesas',
                    'credit_cards': 'üí≥ Cart√µes',
                    'loans': 'üí∞ Empr√©stimos',
                    'transfers': 'üîÑ Transfer√™ncias',
                    'revenues': 'üíµ Receitas'
                }

                operation_icons = {
                    'create': '‚ûï',
                    'read': 'üëÅÔ∏è',
                    'update': '‚úèÔ∏è',
                    'delete': 'üóëÔ∏è'
                }

                app_display = app_names.get(app_name, app_name)
                perm_display = ' '.join(
                    [operation_icons.get(p, p) for p in permissions])

                st.caption(f"{app_display}: {perm_display}")


# Inst√¢ncia global do servi√ßo de permiss√µes
permissions_service = PermissionsService()
