"""
P√°gina de gest√£o de empr√©stimos.

Esta p√°gina permite ao usu√°rio visualizar, criar, editar e excluir
empr√©stimos integrados com a API ExpenseLit.
"""

import logging
import time
from datetime import datetime, timedelta
from typing import Dict, Any
from utils.date_utils import format_date_for_display, format_date_for_api, format_currency_br

import streamlit as st

from pages.router import BasePage
from services.api_client import api_client, ApiClientError
from services.accounts_service import accounts_service
from config.settings import db_categories


logger = logging.getLogger(__name__)


class LoansPage(BasePage):
    """
    P√°gina de gest√£o de empr√©stimos.
    
    Permite opera√ß√µes CRUD em empr√©stimos com integra√ß√£o √† API.
    """
    
    def __init__(self):
        super().__init__("Empr√©stimos", "ü§ù")
        # self.required_permissions = ['loans.view_loan']  # Desabilitado - superusu√°rios t√™m acesso total

    def main_menu(self, token=None, permissions=None):
        """
        M√©todo principal seguindo padr√£o CodexDB.

        Parameters
        ----------
        token : str, optional
            Token de autentica√ß√£o (mantido para compatibilidade)
        permissions : dict, optional
            Permiss√µes do usu√°rio (mantido para compatibilidade)
        """
        st.subheader("ü§ù Empr√©stimos")
        self.render()

    def render(self) -> None:
        """Renderiza o conte√∫do da p√°gina de empr√©stimos."""
        tab1, tab2, tab3 = st.tabs(["üìã Meus Empr√©stimos", "‚ûï Novo Empr√©stimo", "üìä Resumo"])
        
        with tab1:
            self._render_loans_list()
        
        with tab2:
            self._render_loan_form()
        
        with tab3:
            self._render_loans_summary()

    def _render_loans_list(self) -> None:
        """Renderiza a lista de empr√©stimos."""
        st.markdown("### ü§ù Lista de Empr√©stimos")
        
        try:
            with st.spinner("üîÑ Carregando empr√©stimos..."):
                time.sleep(1)
                loans = api_client.get("loans/")
            
            if not loans:
                st.info("üìù Nenhum empr√©stimo cadastrado ainda.")
                return
            
            # Estat√≠sticas r√°pidas
            total_loans = sum(float(loan.get('value', 0)) for loan in loans)
            paid_loans = sum(float(loan.get('payed_value', 0)) for loan in loans)
            pending_loans = total_loans - paid_loans
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üí∞ Total", format_currency_br(total_loans))
            with col2:
                st.metric("‚úÖ Pago", format_currency_br(paid_loans))
            with col3:
                st.metric("‚è≥ Pendente", format_currency_br(pending_loans))
            
            st.markdown("---")
            
            for loan in loans:
                self._render_loan_card(loan)
                
        except ApiClientError as e:
            st.error(f"‚ùå Erro ao carregar empr√©stimos: {e}")
            logger.error(f"Erro ao listar empr√©stimos: {e}")

    def _render_loan_card(self, loan: Dict[str, Any]) -> None:
        """Renderiza um card de empr√©stimo."""
        with st.container():
            col1, col2, col3, col4 = st.columns([3, 2, 1, 1])
            
            with col1:
                description = loan.get('description', 'Empr√©stimo')
                category = loan.get('category', 'others')
                category_emoji = db_categories.EXPENSE_CATEGORY_EMOJIS.get(category, "ü§ù")
                category_name = db_categories.EXPENSE_CATEGORIES.get(category, category)
                benefited = loan.get('benefited_name', 'Beneficiado')
                creditor = loan.get('creditor_name', 'Credor')
                
                st.markdown(f"### {category_emoji} {description}")
                st.caption(f"üìÇ {category_name} | üë• {creditor} ‚Üí {benefited}")
            
            with col2:
                value = float(loan.get('value', 0))
                payed_value = float(loan.get('payed_value', 0))
                remaining = value - payed_value
                date_str = format_date_for_display(loan.get('date', ''))
                time_str = loan.get('horary', '00:00:00')
                
                st.markdown(f"**Total:** {format_currency_br(value)}")
                st.caption(f"üí∏ Pago: {format_currency_br(payed_value)}")
                st.caption(f"‚è≥ Restante: {format_currency_br(remaining)}")
                st.caption(f"üìÖ {date_str} √†s {time_str}")
            
            with col3:
                if loan.get('payed', False):
                    st.success("‚úÖ Quitado")
                else:
                    st.warning("‚è≥ Pendente")
            
            with col4:
                loan_id = loan.get('id')
                with st.popover("‚öôÔ∏è A√ß√µes"):
                    edit_clicked = st.button(
                        "‚úèÔ∏è Editar",
                        key=f"edit_loan_{loan_id}",
                        width='stretch'
                    )
                    
                    toggle_text = ("‚è≥ Marcar Pendente" if loan.get('payed', False) 
                                 else "‚úÖ Marcar Quitado")
                    if st.button(
                        toggle_text,
                        key=f"toggle_loan_{loan_id}",
                        width='stretch'
                    ):
                        self._toggle_loan_payment(loan_id, not loan.get('payed', False))
                    
                    payment_clicked = st.button(
                        "üí∞ Pagamento",
                        key=f"payment_loan_{loan_id}",
                        width='stretch'
                    )
                    
                    if st.button(
                        "üóëÔ∏è Excluir",
                        key=f"delete_loan_{loan_id}",
                        width='stretch'
                    ):
                        self._delete_loan(loan_id, description)
            
            # Processa a√ß√µes fora do contexto do widget
            if edit_clicked:
                st.session_state[f'edit_loan_{loan_id}'] = loan
                st.rerun()
            
            if payment_clicked:
                st.session_state[f'payment_loan_{loan_id}'] = loan
                st.rerun()
            
            # Formul√°rio de pagamento inline se ativo
            if st.session_state.get(f'payment_loan_{loan_id}'):
                self._render_payment_form(loan)
            
            st.markdown("---")

    def _render_payment_form(self, loan: Dict[str, Any]) -> None:
        """Renderiza formul√°rio para pagamento de empr√©stimo."""
        loan_id = loan.get('id')
        value = float(loan.get('value', 0))
        payed_value = float(loan.get('payed_value', 0))
        remaining = value - payed_value
        
        st.markdown("#### üí∞ Registrar Pagamento")
        
        with st.form(f"payment_loan_form_{loan_id}"):
            payment_value = st.number_input(
                "üíµ Valor do Pagamento",
                min_value=0.01,
                max_value=float(remaining),
                value=float(remaining),
                step=0.01,
                format="%.2f"
            )
            
            col_submit, col_cancel = st.columns(2)
            
            with col_submit:
                if st.form_submit_button("üíæ Registrar Pagamento", type="primary"):
                    new_payed_value = payed_value + payment_value
                    is_fully_paid = new_payed_value >= value
                    
                    update_data = {
                        'description': loan.get('description'),
                        'value': loan.get('value'),
                        'payed_value': new_payed_value,
                        'date': loan.get('date'),
                        'horary': loan.get('horary'),
                        'category': loan.get('category'),
                        'account': loan.get('account'),
                        'benefited': loan.get('benefited'),
                        'creditor': loan.get('creditor'),
                        'payed': is_fully_paid
                    }
                    self._update_loan(loan_id, update_data)
            
            with col_cancel:
                if st.form_submit_button("‚ùå Cancelar"):
                    st.session_state.pop(f'payment_loan_{loan_id}', None)
                    st.rerun()

    def _render_loan_form(self) -> None:
        """Renderiza formul√°rio para criar empr√©stimo."""
        st.markdown("### ‚ûï Criar Novo Empr√©stimo")
        
        with st.form("create_loan_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                description = st.text_input(
                    "üìù Descri√ß√£o",
                    placeholder="Ex: Empr√©stimo para compra de carro..."
                )
                
                value = st.number_input(
                    "üí∞ Valor do Empr√©stimo",
                    min_value=0.01,
                    step=0.01,
                    format="%.2f",
                    help="Valor total do empr√©stimo"
                )
                
                category_display = st.selectbox(
                    "üìÇ Categoria",
                    options=list(db_categories.TRANSLATED_EXPENSE_CATEGORIES.keys())
                )
                category = db_categories.TRANSLATED_EXPENSE_CATEGORIES[category_display]
                
                # Tipo de empr√©stimo
                loan_type = st.selectbox(
                    "ü§ù Tipo de Empr√©stimo",
                    options=[
                        ("given", "üí∏ Empr√©stimo Dado (Saindo da conta)"),
                        ("received", "üí∞ Empr√©stimo Recebido (Entrando na conta)")
                    ],
                    format_func=lambda x: x[1],
                    help="Selecione se voc√™ est√° emprestando ou recebendo dinheiro"
                )
            
            with col2:
                loan_date = st.date_input(
                    "üìÖ Data do Empr√©stimo",
                    value=datetime.now().date(),
                    format="DD/MM/YYYY"
                )
                
                loan_time = st.time_input(
                    "üïê Hor√°rio",
                    value=datetime.now().time()
                )
                
                # Sele√ß√£o de conta
                try:
                    accounts = accounts_service.get_all_accounts()
                    if not accounts:
                        st.error("‚ùå Nenhuma conta dispon√≠vel. Cadastre uma conta primeiro.")
                        return
                    
                    account_options = [(acc['id'], db_categories.INSTITUTIONS.get(acc['name'], acc['name'])) for acc in accounts if acc.get('is_active', True)]
                    selected_account = st.selectbox(
                        "üè¶ Conta",
                        options=account_options,
                        format_func=lambda x: x[1]
                    )
                    account_id = selected_account[0]
                except ApiClientError:
                    st.error("‚ùå Erro ao carregar contas")
                    return
                
                # Sele√ß√£o de membros
                try:
                    members = api_client.get("members/")
                    if not members:
                        st.error("‚ùå Nenhum membro dispon√≠vel. Cadastre membros primeiro.")
                        return
                    
                    member_options = [(member['id'], member['name']) for member in members if member.get('active', True)]
                    
                    selected_benefited = st.selectbox(
                        "üë§ Beneficiado",
                        options=member_options,
                        format_func=lambda x: x[1],
                        help="Quem recebeu o empr√©stimo"
                    )
                    benefited_id = selected_benefited[0]
                    
                    selected_creditor = st.selectbox(
                        "üíº Credor",
                        options=member_options,
                        format_func=lambda x: x[1],
                        help="Quem emprestou o dinheiro"
                    )
                    creditor_id = selected_creditor[0]
                except ApiClientError:
                    st.error("‚ùå Erro ao carregar membros")
                    return
            
            # Valida√ß√£o de saldo para empr√©stimos dados
            if loan_type[0] == "given" and value and account_id:
                try:
                    account_balance = self._calculate_account_balance(account_id)
                    
                    if account_balance is not None:
                        remaining_balance = account_balance - value
                        
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("üí∞ Saldo Atual", format_currency_br(account_balance))
                        with col2:
                            st.metric("üí∏ Empr√©stimo", format_currency_br(value))
                        with col3:
                            if remaining_balance >= 0:
                                st.metric("‚úÖ Saldo Ap√≥s", format_currency_br(remaining_balance), delta=f"-{format_currency_br(value)}")
                            else:
                                st.metric("‚ùå Saldo Ap√≥s", format_currency_br(remaining_balance), delta=f"-{format_currency_br(value)}")
                                st.error(f"‚ö†Ô∏è **Saldo insuficiente!** Faltam {format_currency_br(abs(remaining_balance))}")
                    else:
                        st.warning("‚ö†Ô∏è N√£o foi poss√≠vel verificar o saldo da conta")
                        
                except Exception as e:
                    st.warning("‚ö†Ô∏è Erro ao verificar saldo da conta")
                    logger.warning(f"Erro ao verificar saldo: {e}")
            
            if st.form_submit_button("üíæ Criar Empr√©stimo", type="primary"):
                # Valida√ß√µes mais robustas
                errors = []
                
                if not description:
                    errors.append("Descri√ß√£o √© obrigat√≥ria")
                
                if not value or value <= 0:
                    errors.append("Valor deve ser maior que zero")
                
                if not account_id:
                    errors.append("Selecione uma conta")
                
                if not benefited_id or not creditor_id:
                    errors.append("Selecione beneficiado e credor")
                
                # Valida√ß√£o de saldo para empr√©stimos dados
                if loan_type[0] == "given" and value and account_id:
                    try:
                        balance = self._calculate_account_balance(account_id)
                        if balance is not None and balance < value:
                            errors.append(f"Saldo insuficiente na conta. Saldo: {format_currency_br(balance)}")
                    except Exception:
                        errors.append("N√£o foi poss√≠vel verificar o saldo da conta")
                
                if errors:
                    st.error("‚ùå **Erros encontrados:**")
                    for error in errors:
                        st.error(f"‚Ä¢ {error}")
                else:
                    loan_data = {
                        'description': description,
                        'value': value,
                        'payed_value': 0.0,  # Sempre come√ßa com 0
                        'date': format_date_for_api(loan_date),
                        'horary': loan_time.strftime('%H:%M:%S'),
                        'category': category,
                        'account': account_id,
                        'benefited': benefited_id,
                        'creditor': creditor_id,
                        'payed': False,  # Sempre come√ßa como n√£o pago
                        'loan_type': loan_type[0]  # Adiciona o tipo
                    }
                    self._create_loan(loan_data)

    def _calculate_account_balance(self, account_id: int) -> float:
        """
        Calcula o saldo de uma conta baseado em receitas, despesas e transfer√™ncias.
        
        Parameters
        ----------
        account_id : int
            ID da conta
            
        Returns
        -------
        float
            Saldo da conta ou None se erro
        """
        try:
            balance = 0.0
            
            # Somar receitas da conta
            revenues = api_client.get("revenues/")
            account_revenues = [r for r in revenues if r.get('account') == account_id]
            balance += sum(float(r.get('value', 0)) for r in account_revenues)
            
            # Subtrair despesas da conta
            expenses = api_client.get("expenses/")
            account_expenses = [e for e in expenses if e.get('account') == account_id]
            balance -= sum(float(e.get('value', 0)) for e in account_expenses)
            
            # Transfer√™ncias onde a conta √© origem (subtrai)
            transfers = api_client.get("transfers/")
            outgoing_transfers = [t for t in transfers if t.get('origin_account') == account_id and t.get('transfered', False)]
            balance -= sum(float(t.get('value', 0)) for t in outgoing_transfers)
            
            # Transfer√™ncias onde a conta √© destino (soma)
            incoming_transfers = [t for t in transfers if t.get('destiny_account') == account_id and t.get('transfered', False)]
            balance += sum(float(t.get('value', 0)) for t in incoming_transfers)
            
            # Empr√©stimos dados (subtrai da conta) - apenas os efetivados
            loans = api_client.get("loans/")
            given_loans = [l for l in loans if l.get('account') == account_id and l.get('loan_type') == 'given']
            balance -= sum(float(l.get('value', 0)) for l in given_loans)
            
            # Empr√©stimos recebidos (soma na conta) - apenas os efetivados
            received_loans = [l for l in loans if l.get('account') == account_id and l.get('loan_type') == 'received']
            balance += sum(float(l.get('value', 0)) for l in received_loans)
            
            return balance
            
        except Exception as e:
            logger.error(f"Erro ao calcular saldo da conta {account_id}: {e}")
            return None

    def _render_loans_summary(self) -> None:
        """Renderiza resumo dos empr√©stimos."""
        st.markdown("### üìä Resumo de Empr√©stimos")
        
        try:
            with st.spinner("üìä Carregando estat√≠sticas..."):
                time.sleep(1)
                loans = api_client.get("loans/")
            
            if not loans:
                st.info("üìù Nenhum empr√©stimo encontrado.")
                return
            
            total_loans = len(loans)
            total_value = sum(float(loan.get('value', 0)) for loan in loans)
            total_paid = sum(float(loan.get('payed_value', 0)) for loan in loans)
            total_pending = total_value - total_paid
            paid_loans = sum(1 for loan in loans if loan.get('payed', False))
            pending_loans = total_loans - paid_loans
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("üìä Total de Empr√©stimos", total_loans)
            with col2:
                st.metric("üí∞ Valor Total", format_currency_br(total_value))
            with col3:
                st.metric("‚úÖ Valor Pago", format_currency_br(total_paid))
            with col4:
                st.metric("‚è≥ Valor Pendente", format_currency_br(total_pending))
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("‚úÖ Empr√©stimos Quitados", paid_loans)
            with col2:
                st.metric("‚è≥ Empr√©stimos Pendentes", pending_loans)
            
        except ApiClientError as e:
            st.error(f"‚ùå Erro ao carregar estat√≠sticas: {e}")
            logger.error(f"Erro ao carregar resumo de empr√©stimos: {e}")

    def _create_loan(self, loan_data: Dict[str, Any]) -> None:
        """Cria um novo empr√©stimo."""
        try:
            with st.spinner("üíæ Criando empr√©stimo..."):
                time.sleep(1)
                new_loan = api_client.post("loans/", loan_data)
            
            st.toast("‚úÖ Empr√©stimo criado com sucesso!")
            time.sleep(1)
            st.rerun()
            
        except ApiClientError as e:
            st.error(f"‚ùå Erro ao criar empr√©stimo: {e}")
            logger.error(f"Erro ao criar empr√©stimo: {e}")

    def _update_loan(self, loan_id: int, loan_data: Dict[str, Any]) -> None:
        """Atualiza um empr√©stimo."""
        try:
            with st.spinner("üíæ Atualizando empr√©stimo..."):
                time.sleep(1)
                updated_loan = api_client.put(f"loans/{loan_id}/", loan_data)
            
            st.success("‚úÖ Empr√©stimo atualizado com sucesso!")
            st.session_state.pop(f'payment_loan_{loan_id}', None)
            st.rerun()
            
        except ApiClientError as e:
            st.error(f"‚ùå Erro ao atualizar empr√©stimo: {e}")
            logger.error(f"Erro ao atualizar empr√©stimo {loan_id}: {e}")

    def _toggle_loan_payment(self, loan_id: int, is_paid: bool) -> None:
        """Alterna o status de pagamento de um empr√©stimo."""
        try:
            with st.spinner(f"{'Marcando como quitado' if is_paid else 'Marcando como pendente'}..."):
                loan_data = api_client.get(f"loans/{loan_id}/")
                
                update_data = {
                    'description': loan_data.get('description'),
                    'value': loan_data.get('value'),
                    'payed_value': loan_data.get('value') if is_paid else 0,
                    'date': loan_data.get('date'),
                    'horary': loan_data.get('horary'),
                    'category': loan_data.get('category'),
                    'account': loan_data.get('account'),
                    'benefited': loan_data.get('benefited'),
                    'creditor': loan_data.get('creditor'),
                    'payed': is_paid
                }
                
                api_client.put(f"loans/{loan_id}/", update_data)
            
            status_text = "quitado" if is_paid else "pendente"
            st.success(f"‚úÖ Empr√©stimo marcado como {status_text}!")
            st.rerun()
            
        except ApiClientError as e:
            st.error(f"‚ùå Erro ao alterar status: {e}")
            logger.error(f"Erro ao alterar status do empr√©stimo {loan_id}: {e}")

    def _delete_loan(self, loan_id: int, description: str) -> None:
        """Exclui um empr√©stimo ap√≥s confirma√ß√£o."""
        confirm_key = f"confirm_delete_loan_{loan_id}"
        
        if not st.session_state.get(confirm_key, False):
            st.session_state[confirm_key] = True
            st.rerun()
        
        st.warning(f"‚ö†Ô∏è **Tem certeza que deseja excluir o empr√©stimo '{description}'?**")
        st.error("üö® **ATEN√á√ÉO:** Esta a√ß√£o n√£o pode ser desfeita!")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button(
                "üóëÔ∏è Sim, Excluir",
                key=f"final_confirm_delete_loan_{loan_id}",
                type="primary",
                width='stretch'
            ):
                try:
                    with st.spinner("üóëÔ∏è Excluindo empr√©stimo..."):
                        api_client.delete(f"loans/{loan_id}/")
                    
                    st.success(f"‚úÖ Empr√©stimo '{description}' exclu√≠do com sucesso!")
                    st.session_state.pop(confirm_key, None)
                    st.rerun()
                    
                except ApiClientError as e:
                    st.error(f"‚ùå Erro ao excluir empr√©stimo: {e}")
                    logger.error(f"Erro ao excluir empr√©stimo {loan_id}: {e}")
                    st.session_state.pop(confirm_key, None)
        
        with col2:
            if st.button(
                "‚ùå Cancelar",
                key=f"cancel_delete_loan_{loan_id}",
                width='stretch'
            ):
                st.session_state.pop(confirm_key, None)
                st.rerun()
