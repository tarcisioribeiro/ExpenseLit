"""
P√°gina de configura√ß√µes.
"""

import streamlit as st
from pages.router import BasePage
import time


class SettingsPage(BasePage):
    def __init__(self):
        super().__init__("Configura√ß√µes", "‚öôÔ∏è")

    def main_menu(self, token=None, permissions=None):
        """
        M√©todo principal seguindo padr√£o CodexDB.

        Parameters
        ----------
        token : str, optional
            Token de autentica√ß√£o (mantido para compatibilidade)
        permissions : dict, optional
            Permiss√µes do usu√°rio (mantido para compatibilidade)
        """
        st.subheader("‚öôÔ∏è Configura√ß√µes")
        self.render()

    def render(self) -> None:
        """
        Renderiza as configura√ß√µes da aplica√ß√£o.
        """
        # Configura√ß√µes do sistema
        self._render_system_settings()

    def _render_system_settings(self) -> None:
        """
        Renderiza as configura√ß√µes do sistema.
        """
        st.markdown("### üîß Configura√ß√µes do Sistema")

        col1, col2 = st.columns(2)

        with col1:
            st.markdown("**Configura√ß√µes de Interface:**")

            # Configura√ß√£o de spinners
            spinner_duration = st.slider(
                "‚è±Ô∏è Dura√ß√£o dos Spinners (segundos)",
                min_value=1,
                max_value=5,
                value=2,
                help="Tempo de exibi√ß√£o dos indicadores de carregamento"
            )

            # Configura√ß√£o de toast
            toast_duration = st.slider(
                "üçû Dura√ß√£o das Notifica√ß√µes (segundos)",
                min_value=1,
                max_value=10,
                value=2,
                help="Tempo de exibi√ß√£o das mensagens de sucesso"
            )

        with col2:
            st.markdown("**Configura√ß√µes de Dados:**")

            # Configura√ß√£o de pagina√ß√£o
            items_per_page = st.number_input(
                "üìÑ Itens por p√°gina",
                min_value=10,
                max_value=100,
                value=20,
                step=10,
                help="N√∫mero de itens exibidos por p√°gina nas listas"
            )

            # Auto-refresh
            auto_refresh = st.checkbox(
                "üîÑ Atualiza√ß√£o autom√°tica",
                value=False,
                help="Atualizar dados automaticamente a cada 30 segundos"
            )

        if st.button("üíæ Salvar Configura√ß√µes do Sistema", type="secondary"):
            # Salvar configura√ß√µes no session_state
            st.session_state.update({
                'spinner_duration': spinner_duration,
                'toast_duration': toast_duration,
                'items_per_page': items_per_page,
                'auto_refresh': auto_refresh
            })

            st.toast("‚öôÔ∏è Configura√ß√µes do sistema salvas com sucesso!")
            time.sleep(1)
